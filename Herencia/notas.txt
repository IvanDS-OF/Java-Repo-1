Java nos permite hacer uso del concepto de herencia mediante la extension de clases

Cuando extendemos una clase, estamos extendiendo igualmente las funcionalidades a una otra nueva clase

Claramente esto hace que podamos re usar el codigo y sea mas facil mantener y evolucionar

En Java tenemos la Superclase y la Subclase



*********** Constructores
Cuando tenemos una superclase y una Subclase y ningua de las dos ha creado un constructor, Java
colocara un constructor por defecto



Jerarquia
Java no permite que una subClase sea hija de multiples SuperClases
Pero si es posible hacerlo de la manera invera
Y de igual manera es posible hacer que una subclase sea una Superclase






//CLASES OBJECT
La clase Object es la SUPER CLASE de todas las demas





//Clases Abstractas 
Nos permiten implemetnar el polimorfismo :D
Nos permite crear clases diferentes de comparten los mismos metodos publicos
y es imporatnte porque facilita la modularidad en la programacion OO

Sirven para dar cuarpo a otras clases con solamente indicando los metodos
que las subclases deberian de tener pero que es forzosamente necesario modificar

El declarar un metodo como Abstrac obliga a las subclases a implementarlo
el efecto contrario sería declararlo como Final

Un metodo declarado como Final no puede ser sobreescrito
Así como con las clases, las podemos declarar como Final y así ninguna clase podra 
heredar de esta








//INTERFACES
Conjunto de metodos a los que una instancia de una clase respondera 
Podriamos decir que la interfaz de una clase es el CONJUNTO DE SUS METODOS PUBLISCO  

Una Interfaz especifica qué acciones puede ejecutar una instancia PERO  no especifica
la manera en que se implementaran esas acciones








